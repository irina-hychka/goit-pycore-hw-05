import re
from typing import Callable


def generator_numbers(text: str):
    """
    Function to generate floating-point numbers found in the text.
    
    Params:
        text (str): The input string.
    
    Yields:
        Each floating-point number found in the text.
    
    Raises:
        ValueError: If the input is not text or is empty or None.
    """
    if not isinstance(text, str):
        raise ValueError("The input must be a string.")
    
    if not text:
        raise ValueError("The input text is empty or None.")

    # Regular expression to find floating-point numbers
    pattern = r"(?<=\s)\d+\.\d+(?=\s)"
    
    # Iterate over all the matches in the text and yield them as floats
    for match in re.finditer(pattern, text):
        yield float(match.group())


def sum_profit(text: str, func: Callable):
    """
    Calculates the sum of floating-point numbers
    by using the provided generator function.
    
    Params:
        text (str): The input string.
        func (Callable): A function that returns a generator of numbers.
    
    Returns:
        float: The total sum of all numbers generated by the provided function.
    """
    total = 0.0
    
    # Calculate the sum
    for number in func(text):
        total += number
    
    return total


# Text Example
text = ("The total income of the employee consists of several parts: \
        1000.01 as the main income, supplemented by additional earnings of 27.45 \
        and 324.00 dollars.")

# Usage
if __name__ == "__main__":
    total_income = sum_profit(text, generator_numbers)
    # Expected Output Example: Total income: 1351.46
    print(f"Total income: {total_income:.2f}")